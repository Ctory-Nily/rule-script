name: Fetch and Convert Files

on:
  # 每天 UTC 时间 20:00 触发（北京时间 04:00）
  schedule:
    - cron: '0 20 * * *'
  # 手动触发
  workflow_dispatch: 

jobs:
  # 监听 Process JSON URLs 的完成
  wait-for-process-json-urls:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.name == 'Process JSON URLs' && github.event.workflow_run.conclusion == 'success' }}
    outputs:
      process_json_urls_completed: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check if Process JSON URLs completed
        run: echo "Process JSON URLs completed successfully."

  # 监听 Process and Fetch Rule 的完成
  wait-for-process-and-fetch-rule:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.name == 'Process and Fetch Rule' && github.event.workflow_run.conclusion == 'success' }}
    outputs:
      process_and_fetch_rule_completed: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check if Process and Fetch Rule completed
        run: echo "Process and Fetch Rule completed successfully."

  # 主作业，根据条件执行
  fetch_and_convert:
    runs-on: ubuntu-latest

    needs: [wait-for-process-json-urls, wait-for-process-and-fetch-rule]

    if: |
      # 如果是手动触发或定时触发
      github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' ||
      # 如果 Process JSON URLs 完成, Process and Fetch Rule 未完成
      (needs.wait-for-process-json-urls.result == 'success' && needs.wait-for-process-and-fetch-rule.result == 'skipped') ||
      # 如果 Process and Fetch Rule 完成, Process JSON URLs 未完成
      (needs.wait-for-process-json-urls.result == 'skipped' && needs.wait-for-process-and-fetch-rule.result == 'success') ||
      # 如果两者都完成
      (needs.wait-for-process-json-urls.result == 'success' && needs.wait-for-process-and-fetch-rule.result == 'success')

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyyaml requests
    
    # 运行 fetch_and_convert.py 脚本
    - name: Run fetch and convert script
      run: |
        python script/fetch_and_convert.py

    # 提交推送
    - name: Commit and push changes
      env:
        GH_TOKEN: ${{ secrets.PUSH_EVERYDAY }}
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add .
        if git diff-index --quiet HEAD; then
          echo "没有文件更改，跳过提交。"
        else
          git commit -m "Auto-fetched and converted files to YAML"
          git pull origin main
          git remote set-url origin https://x-access-token:$GH_TOKEN@github.com/$GITHUB_REPOSITORY.git
          if git push origin main; then
            echo "推送成功。"
          else
            echo "推送失败，请检查远程分支是否有冲突。"
            exit 1
          fi
        fi